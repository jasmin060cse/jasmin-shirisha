#program 1
class  cse:
  def __init__(self,name,rollno):
    self.n=name
    self.rn=rollno
  def fun(self):
      print("this is a function")
s1=cse('rahul',34)
s2=cse('raghu',36)
s1.fun()
s2.fun()
print(s1.n,s2.n)

#program 2
class ciecle:
    def __init__(self,radius):
        self.r=radius
    def printing(self):
        print(math.pi*self.r*self.r)
        class rectangle:
            def __init__(self,l,b)
            def printing(self):
                pass
l=float(input())
b=float(input())
r=float(input())
o=circle(r)
o1=rectangle(l,b)
o.printing(l,b)
o1.printing(l,b)


#program 3
class re:
    def __init__(self,model,colour,mileage):
        self.m=model
        self.cl=colour
        self.m=mileage
b1=re("classic 350","black",10)
b2=re("xyz","red",30)
b3=re("pqr","blue",25)
print(b1.m,b1.c,b1.m)
print(b2.m,b2.c1,b.m)
print(c.name,c.cl,c.m)


#program 4
class VivoMobile:
    x=99
    def samplemethod(mymobile):
        priclassnt('Value is:',mymobile.x)
obj=VclassivoMobile()
obj.samplemethod()



 class VivoMobile:
  
   def __init__(self):#this is a function it executes without function calling
      print("welcome to vivo mobiles:")

def exaple(self):#methods
   print("better company")  

o=VivoMobile()


 class VivoMobile:
    def __init__(self):
        pass

    def info(self):
      print('X50','16gb','256')  

o=VivoMobile()
o.info()

#program 5
class VivoMobile:
    def __init__(self):
        pass

    def info(self):
      print('X50','16gb','256')  

o=VivoMobile()
o.info()

o2=VivoMobile()
o2.info()


#program 6
class student:
    #class and static variable

    school="telugu computer world"
    def __init__(self):
        #instance variable
        self.marks1='marks1'
        self.marks2='marks2'
        self.marks3='marks3'

#instance method
#===get method=== get methods are called as accesser
    def get_m1(self):
        return self.marks1 
    

    def get_m2(self):
        return self.marks2 
    
    def get_m3(self):
        return self.marks3
     
    #set methods are mutable value can be changed
 
    def set_m1(self,val):
        self.marks1=val


    def set_m2(self,val):
        self.marks2=val


    def set_m3(self,val):
        self.marks3=val


    @classmethod
    def get_school(cls):
      return cls.school

s1=student()
s2=student()
s3=student()
print(student.get_school())






s1.set_m1(79)
print(s1.get_m1())

s2.set_m2(56)
print(s2.get_m2())


s3.set_m3(67)
print(s3.get_m3())

#class methods are used to call the function inside the class function


#program 7
lass student:
    #class and static variable
    def __init__(self):
        #instance variable
        self.marks1='marks1'
        self.marks2='marks2'
        self.marks3='marks3'

s1=student()
s2=student() 
s1.marks=81
s2.marks=91
print(s1.marks,s2.marks)       





